{"componentChunkName":"component---src-templates-post-content-view-js","path":"/post/a-rather-easy-way-to-implement-quicksort-in-js","result":{"data":{"markdownRemark":{"html":"<p>Don't use in-place swap.</p>\n<p>Declare 2 new array <code>left</code> and <code>right</code> (or anything you want to call them).<br>\nAfter comparing each element to pivot, push it to <code>left</code> if it's smaller or <code>right</code> if it's bigger than pivot.<br>\nThen <code>return [...quickSort(left), pivot, ...quickSort(right)]</code> will do the magic.</p>\n<p>Of course it's not as good space efficiency-wise, but it's way easier to implement and understand.</p>\n<p>Example code:</p>\n<pre><code>function quickSort(arr){\n  if(arr.length &#x3C;= 1) return arr;\n  else {\n    let pivot = arr.pop();\n    let len = arr.length;\n    let left = [];\n    let right = [];\n    for(let i = 0; i &#x3C; len; i++){\n      if(arr[i] >= pivot) right.push(arr[i]);\n      else left.push(arr[i]);\n    }\n    return [...quickSort(left), pivot, ...quickSort(right)];\n  }\n}\n</code></pre>","frontmatter":{"date":"2019-05-23","path":"/post/a-rather-easy-way-to-implement-quicksort-in-js","title":"A rather easy way to implement quicksort in JavaScript","tags":"JavaScript, algorithm"}},"allImageSharp":{"edges":[]}},"pageContext":{"slug":"/a-rather-easy-way-to-implement-quicksort-in-js/"}}}