{"componentChunkName":"component---src-templates-post-content-view-js","path":"/post/download-progress-tool-in-terminal-using-nodejs","result":{"data":{"markdownRemark":{"html":"<h3>TL;DR:</h3>\n<ul>\n<li><code>fs.stat</code> for getting file size</li>\n<li><code>readline.clearLine</code></li>\n<li><code>readline.cursorTo(0)</code></li>\n<li><code>process.stdout.write</code>\n<br>combine these 3 to update command line instead of printing new line</li>\n</ul>\n<h2>Get file size</h2>\n<p><code>fs.stat</code> returns an object contains several stats of the file from url you're downloading.<br>\n<a href=\"https://nodejs.org/api/fs.html#fs_class_fs_stats\">Detailed explanation of fs.stat</a>.<br>\nInside of the object, there is <code>size</code> property, which is obviously the size of file, in bytes.</p>\n<pre><code>let fileSize = 0;\nfs.stat('url/to/your/file', (stats)=>{\n  fileSize = stats.size;\n});\n</code></pre>\n<h2>Get current progression</h2>\n<p>In the response from <code>https.get</code> when downloading, track and add up the total length of chunks piped into <code>fs.writeStream</code>. This total length devided by file size is the download progression we need.</p>\n<h2>Write to terminal, but in same line</h2>\n<p><code>console.log</code> <a href=\"https://nodejs.org/docs/v0.3.1/api/process.html#process.stdout\">implementation</a> in Node is actually based on <code>process.stdout.write</code>. But since there's a <code>\\n</code> at end of every <code>console.log</code>, new line is printed everytime instead of being updated. Therefore we can't use <code>console.log</code></p>\n<p>By combine <code>readline.clearLine</code> and <code>readline.cursorTo(0)</code>, terminal will erase the last line of currently printed line, then move cursor to the starting position. Then we can use <code>process.stdout.write</code> to print out current progress without <code>\\n</code> in <code>console.log</code> implementation that causes changing line.</p>\n<pre><code>let progress = 0;\nlet req = https.get('url/to/your/file', (res, err)=>{\n  res.on('data', (chunk)=>{\n    progress += chunk.length;\n    const dlPercentage = ((progress/fileSize)*100).toFixed(2);\n    readline.clearLine();\n    readline.cursorTo(0);\n    process.stdout.write(`Downloading... ${dlPercentage}%`);\n  });\n});\n</code></pre>","frontmatter":{"date":"2019-06-07","path":"/post/download-progress-tool-in-terminal-using-nodejs","title":"Download progress tool in terminal using Node.JS","tags":"JavaScript, Node.JS"}},"allImageSharp":{"edges":[]}},"pageContext":{"slug":"/download-progress-tool-in-terminal-using-nodejs/"}}}