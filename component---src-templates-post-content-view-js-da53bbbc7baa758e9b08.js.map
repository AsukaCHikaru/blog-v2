{"version":3,"sources":["webpack:///./src/components/postContentHeader.js","webpack:///./src/components/postContentFooter.js","webpack:///./src/components/postContentLayout.js","webpack:///./src/lib/htmlConverter.js","webpack:///./src/templates/postContentView.js"],"names":["Header","tags","postMetadata","className","title","date","split","map","tag","i","to","toLowerCase","replace","key","defaultProps","siteTitle","PostContentFooter","Date","getFullYear","href","target","rel","PostContentLayout","children","data","site","siteMetadata","convertLink","html","convertedHTML","regexp","RegExp","convertYoutube","PostContentView","markdownRemark","frontmatter","htmlConverter","dangerouslySetInnerHTML","__html","pageQuery"],"mappings":"wRAoBMA,G,UAAS,SAAC,GAAD,IAdIC,EAcDC,EAAH,EAAGA,aAAH,OACb,gCACE,wBAAIC,UAAU,kBAAkBD,EAAaE,OAC7C,wBAAID,UAAU,iBAAiBD,EAAaG,MAC5C,yBAAKF,UAAU,wBAjBU,QADVF,EAkBkCC,EAAaD,MAjB9B,GAAKA,EAAKK,MAAM,OACjCC,KAAI,SAACC,EAAKC,GACzB,OACE,kBAAC,OAAD,CACEC,GAAE,QAAUF,EAAIG,cAAcC,QAAQ,MAAO,KAC7CC,IAAG,YAAcJ,GAEjB,wBAAIN,UAAU,gBAAd,IAAkCK,WAkB1CR,EAAOc,aAAe,CACpBC,UAAU,IAGGf,Q,wBCHAgB,EA9BW,SAAC,GAAD,IAAGD,EAAH,EAAGA,UAAH,OACxB,gCACE,kBAAC,OAAD,CAAML,GAAG,IAAIP,UAAU,sBACpBY,GAEH,yBAAKZ,UAAU,0BACb,kBAAC,OAAD,CAAMO,GAAG,mBAAmBP,UAAU,gBAAtC,UAGA,kBAAC,OAAD,CAAMO,GAAG,wBAAwBP,UAAU,gBAA3C,eAGA,kBAAC,OAAD,CAAMO,GAAG,mBAAmBP,UAAU,gBAAtC,WAIF,yBAAKA,UAAU,0BAAf,MACK,IAAIc,MAAOC,cAAe,IAC7B,uBACEf,UAAU,eACVgB,KAAK,2BACLC,OAAO,SACPC,IAAI,uBAJN,uBCUSC,EAvBW,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,SAAUrB,EAAmB,EAAnBA,aAC/BsB,EAAI,OASV,OACE,yBAAKrB,UAAU,0BACb,kBAAC,EAAD,CAAmBD,aAAcA,IACjC,8BAAOqB,GACP,kBAAC,EAAD,CAAmBR,UAAWS,EAAKC,KAAKC,aAAatB,U,YCdrDuB,G,UAAc,SAAAC,GAClB,IAAIC,EAAgBD,EACdE,EAAS,IAAIC,OAAO,6BAI1B,OADAF,EAAgBA,EAAcjB,QAAQkB,EADpC,mEAKEE,EAAiB,SAAAJ,GACrB,IAAIC,EAAgBD,EACdE,EAAS,IAAIC,OACjB,iEAKF,OADAF,EAAgBA,EAAcjB,QAAQkB,EADpC,qGChBW,SAASG,EAAT,GAAoC,IACzCC,EADwC,EAARV,KAChCU,eACAC,EAAsBD,EAAtBC,YAAaP,EAASM,EAATN,KACf1B,EAAe,CACnBE,MAAO+B,EAAY/B,MACnBC,KAAM8B,EAAY9B,KAClBJ,KAAMkC,EAAYlC,MAEd4B,EDfqB,SAAAD,GAC3B,IAAIC,EAIJ,OAHAA,EAAgBG,EAAeJ,GAC/BC,EAAgBF,EAAYE,GCYNO,CAAcR,GACpC,OACE,kBAAC,EAAD,CAAmB1B,aAAcA,GAC/B,kBAAC,IAAD,CAAKE,MAAO+B,EAAY/B,QACxB,yBACED,UAAU,eACVkC,wBAAyB,CAAEC,OAAQT,MArB3C,kFA2BO,IAAMU,EAAS","file":"component---src-templates-post-content-view-js-da53bbbc7baa758e9b08.js","sourcesContent":["import { Link } from 'gatsby';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport '../styles/header.css';\n\nconst renderTags = tags => {\n  const tagsArray = tags === null ? [] : tags.split(', ');\n  return tagsArray.map((tag, i) => {\n    return (\n      <Link \n        to={`/tag/${tag.toLowerCase().replace(/\\s/g, '-')}`} \n        key={`post-tag-${i}`}\n      >\n        <h3 className=\"post-tag-txt\">{`#${tag}`}</h3>\n      </Link>\n    );\n  });\n};\n\nconst Header = ({ postMetadata }) => (\n  <header>\n    <h1 className=\"post-title-txt\">{postMetadata.title}</h1>\n    <h3 className=\"post-date-txt\">{postMetadata.date}</h3>\n    <div className=\"post-tags-container\">{renderTags(postMetadata.tags)}</div>\n  </header>\n);\n\nHeader.propTypes = {\n  siteTitle: PropTypes.string,\n};\n\nHeader.defaultProps = {\n  siteTitle: ``,\n};\n\nexport default Header;\n","import React from 'react';\nimport { Link } from '@reach/router';\n\nconst PostContentFooter = ({ siteTitle }) => (\n  <footer>\n    <Link to=\"/\" className=\"footer--link_title\">\n      {siteTitle}\n    </Link>\n    <div className=\"footer--link_container\">\n      <Link to=\"/category/gaming\" className=\"footer--link\">\n        GAMING\n      </Link>\n      <Link to=\"/category/programming\" className=\"footer--link\">\n        PROGRAMMING\n      </Link>\n      <Link to=\"/category/others\" className=\"footer--link\">\n        OTHERS\n      </Link>\n    </div>\n    <div className=\"footer--link_container\">\n      Â© {new Date().getFullYear()}{' '}\n      <a\n        className=\"footer--link\"\n        href=\"https://asukachikaru.com\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        asukachikaru.com\n      </a>\n    </div>\n  </footer>\n);\n\nexport default PostContentFooter;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useStaticQuery, graphql } from 'gatsby';\n\nimport PostContentHeader from './postContentHeader';\nimport '../styles/postContent.css';\nimport PostContentFooter from './postContentFooter';\n\nconst PostContentLayout = ({ children, postMetadata }) => {\n  const data = useStaticQuery(graphql`\n    query footerSiteTitleQuery {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `);\n  return (\n    <div className=\"post-content-container\">\n      <PostContentHeader postMetadata={postMetadata} />\n      <main>{children}</main>\n      <PostContentFooter siteTitle={data.site.siteMetadata.title} />\n    </div>\n  );\n};\n\nPostContentLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default PostContentLayout;\n","export const htmlConverter = html => {\n  let convertedHTML;\n  convertedHTML = convertYoutube(html);\n  convertedHTML = convertLink(convertedHTML);\n\n  return convertedHTML;\n};\n\nconst convertLink = html => {\n  let convertedHTML = html;\n  const regexp = new RegExp(/<a href=\"(.*)\">(.*)<\\/a>/g);\n  const targetStr =\n    '<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"$1\">$2</a>';\n  convertedHTML = convertedHTML.replace(regexp, targetStr);\n  return convertedHTML;\n};\n\nconst convertYoutube = html => {\n  let convertedHTML = html;\n  const regexp = new RegExp(\n    /<p>\\(<a\\shref=\"https:\\/\\/www\\.youtube\\.com\\/watch\\?v=(.+)\".+/g\n  );\n  const targetStrYT =\n    '<div class=\"youtube\"><iframe type=\"text/html\" src=\"https://youtube.com/embed/$1\"></iframe></div>';\n  convertedHTML = convertedHTML.replace(regexp, targetStrYT);\n  return convertedHTML;\n};\n","import React from 'react';\nimport { graphql } from 'gatsby';\n\nimport PostContentLayout from '../components/postContentLayout';\nimport SEO from '../components/seo';\nimport { htmlConverter } from '../lib/htmlConverter';\n\nexport default function PostContentView({ data }) {\n  const { markdownRemark } = data; // data.markdownRemark holds your post data\n  const { frontmatter, html } = markdownRemark;\n  const postMetadata = {\n    title: frontmatter.title,\n    date: frontmatter.date,\n    tags: frontmatter.tags,\n  };\n  const convertedHTML = htmlConverter(html);\n  return (\n    <PostContentLayout postMetadata={postMetadata}>\n      <SEO title={frontmatter.title} />\n      <div\n        className=\"post-wrapper\"\n        dangerouslySetInnerHTML={{ __html: convertedHTML }}\n      />\n    </PostContentLayout>\n  );\n}\n\nexport const pageQuery = graphql`\n  query($path: String!, $slug: String) {\n    markdownRemark(frontmatter: { path: { eq: $path } }) {\n      html\n      frontmatter {\n        date(formatString: \"YYYY-MM-DD\")\n        path\n        title\n        tags\n      }\n    }\n    allImageSharp(filter: { fluid: { originalName: { regex: $slug } } }) {\n      edges {\n        node {\n          fluid(quality: 100) {\n            originalImg\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}